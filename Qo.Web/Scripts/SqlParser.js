/* parser generated by jison 0.4.15 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,6],$V1=[1,23],$V2=[1,20],$V3=[1,16],$V4=[1,18],$V5=[1,10],$V6=[1,11],$V7=[1,17],$V8=[1,21],$V9=[1,27],$Va=[1,22],$Vb=[1,24],$Vc=[1,25],$Vd=[1,26],$Ve=[1,29],$Vf=[5,40,68],$Vg=[2,66],$Vh=[1,30],$Vi=[19,20,38,42,44,45,55,75,76,110,112,115,122,123,124,125],$Vj=[5,21,23,25,26,28,32,33,34,37,40,42,47,56,59,60,61,62,63,64,65,66,67,68,70,118,119,120,121],$Vk=[1,33],$Vl=[5,21,23,25,26,28,32,33,34,37,40,42,47,56,59,60,61,62,63,64,65,66,67,68,70,72,118,119,120,121],$Vm=[1,35],$Vn=[5,21,23,25,26,28,32,33,34,37,40,42,47,56,59,60,61,62,63,64,65,66,67,68,70,72,76,78,79,80,81,82,83,84,93,94,99,100,102,118,119,120,121],$Vo=[1,56],$Vp=[1,57],$Vq=[5,21,23,25,26,28,32,33,34,37,40,42,47,56,59,60,61,62,63,64,65,66,67,68,70,72,76,78,79,80,81,82,83,84,93,94,99,100,102,104,105,118,119,120,121],$Vr=[1,59],$Vs=[1,58],$Vt=[1,60],$Vu=[5,21,23,25,26,28,32,33,34,37,40,42,44,47,56,59,60,61,62,63,64,65,66,67,68,70,72,76,78,79,80,81,82,83,84,93,94,99,100,102,104,105,107,108,118,119,120,121],$Vv=[20,38,42,44,45,55,75,76,110,112,115,122,123,124,125],$Vw=[20,38,42,55,90,91,92,110,112,115,122,123,124,125],$Vx=[2,106],$Vy=[1,97],$Vz=[1,98],$VA=[1,108],$VB=[1,109],$VC=[28,40],$VD=[5,21,23,25,26,37,40,68],$VE=[5,21,23,25,26,28,37,40,47,68],$VF=[2,47],$VG=[1,138],$VH=[1,139],$VI=[5,23,25,26,37,40,68],$VJ=[1,165],$VK=[1,163],$VL=[1,164],$VM=[5,21,23,25,26,28,37,40,47,52,57,59,60,61,62,63,64,65,66,67,68],$VN=[1,177],$VO=[2,132],$VP=[118,119,121],$VQ=[5,25,26,37,40,68],$VR=[5,21,23,25,26,28,37,40,68],$VS=[1,185],$VT=[1,186],$VU=[1,187],$VV=[1,188],$VW=[1,189],$VX=[1,190],$VY=[1,191],$VZ=[1,192],$V_=[1,193],$V$=[5,21,23,25,26,28,37,40,59,60,61,62,63,64,65,66,67,68],$V01=[5,21,23,25,26,28,37,40,42,52,56,57,59,60,61,62,63,64,65,66,67,68],$V11=[1,196],$V21=[5,25,26,28,37,40,68],$V31=[5,26,37,40,68],$V41=[38,42,55],$V51=[5,21,23,25,26,28,37,40,52,59,60,61,62,63,64,65,66,67,68],$V61=[5,37,40,68],$V71=[5,28,37,40,68],$V81=[5,28,34,37,40,68],$V91=[1,230],$Va1=[1,237],$Vb1=[28,40,42];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"main":3,"selectClause":4,"EOF":5,"expressionPlus":6,"selectClauseItem":7,"SELECT":8,"optDistinctClause":9,"optTopClause":10,"selectExprList":11,"optTableExprList":12,"optWhereClause":13,"optGroupByClause":14,"optHavingClause":15,"optOrderByClause":16,"optQueryHintsClause":17,"DISTINCT":18,"TOP":19,"NUMERIC":20,"WHERE":21,"expression":22,"GROUP_BY":23,"commaSepExpressionList":24,"HAVING":25,"ORDER_BY":26,"orderByList":27,"COMMA":28,"orderByListItem":29,"optOrderByOrder":30,"optOrderByNulls":31,"ASC":32,"DESC":33,"NULLS":34,"FIRST":35,"LAST":36,"OPTION":37,"LPAREN":38,"queryHintList":39,"RPAREN":40,"queryHint":41,"IDENTIFIER":42,"selectExpr":43,"STAR":44,"QUALIFIED_STAR":45,"optTableExprAlias":46,"FROM":47,"tableExprList":48,"tableExpr":49,"joinComponent":50,"optJoinModifier":51,"ON":52,"tableExprPart":53,"optTableHintsClause":54,"QUALIFIED_IDENTIFIER":55,"AS":56,"WITH":57,"tableHintList":58,"JOIN":59,"LEFT_JOIN":60,"LEFT_OUTER_JOIN":61,"RIGHT_JOIN":62,"RIGHT_OUTER_JOIN":63,"FULL_JOIN":64,"INNER_JOIN":65,"CROSS_JOIN":66,"NATURAL_JOIN":67,"SET_OPERATOR":68,"andCondition":69,"LOGICAL_OR":70,"condition":71,"LOGICAL_AND":72,"operand":73,"conditionRightHandSide":74,"EXISTS":75,"LOGICAL_NOT":76,"compare":77,"CMP_EQUALS":78,"CMP_NOTEQUALS":79,"CMP_NOTEQUALS_BASIC":80,"CMP_GREATER":81,"CMP_GREATEROREQUAL":82,"CMP_LESS":83,"CMP_LESSOREQUAL":84,"rhsCompareTest":85,"rhsIsTest":86,"rhsInTest":87,"rhsLikeTest":88,"rhsBetweenTest":89,"ALL":90,"ANY":91,"SOME":92,"IS":93,"IN":94,"rhsInClause":95,"functionParam":96,"functionExpressionList":97,"optFunctionExpressionList":98,"LIKE":99,"BETWEEN":100,"summand":101,"CONCAT":102,"factor":103,"PLUS":104,"MINUS":105,"term":106,"DIVIDE":107,"MODULO":108,"value":109,"QUOTED_IDENTIFIER":110,"caseWhen":111,"CAST":112,"dataType":113,"optDataTypeLength":114,"CASE":115,"caseWhenList":116,"optCaseWhenElse":117,"END":118,"WHEN":119,"THEN":120,"ELSE":121,"STRING":122,"BOOLEAN":123,"NULL":124,"BIND":125,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"SELECT",18:"DISTINCT",19:"TOP",20:"NUMERIC",21:"WHERE",23:"GROUP_BY",25:"HAVING",26:"ORDER_BY",28:"COMMA",32:"ASC",33:"DESC",34:"NULLS",35:"FIRST",36:"LAST",37:"OPTION",38:"LPAREN",40:"RPAREN",42:"IDENTIFIER",44:"STAR",45:"QUALIFIED_STAR",47:"FROM",52:"ON",55:"QUALIFIED_IDENTIFIER",56:"AS",57:"WITH",59:"JOIN",60:"LEFT_JOIN",61:"LEFT_OUTER_JOIN",62:"RIGHT_JOIN",63:"RIGHT_OUTER_JOIN",64:"FULL_JOIN",65:"INNER_JOIN",66:"CROSS_JOIN",67:"NATURAL_JOIN",68:"SET_OPERATOR",70:"LOGICAL_OR",72:"LOGICAL_AND",75:"EXISTS",76:"LOGICAL_NOT",78:"CMP_EQUALS",79:"CMP_NOTEQUALS",80:"CMP_NOTEQUALS_BASIC",81:"CMP_GREATER",82:"CMP_GREATEROREQUAL",83:"CMP_LESS",84:"CMP_LESSOREQUAL",90:"ALL",91:"ANY",92:"SOME",93:"IS",94:"IN",99:"LIKE",100:"BETWEEN",102:"CONCAT",104:"PLUS",105:"MINUS",107:"DIVIDE",108:"MODULO",110:"QUOTED_IDENTIFIER",112:"CAST",115:"CASE",118:"END",119:"WHEN",120:"THEN",121:"ELSE",122:"STRING",123:"BOOLEAN",124:"NULL",125:"BIND"},
productions_: [0,[3,2],[4,1],[7,10],[9,0],[9,1],[10,0],[10,2],[13,0],[13,2],[14,0],[14,2],[15,0],[15,2],[16,0],[16,2],[27,3],[27,1],[29,3],[30,0],[30,1],[30,1],[31,0],[31,2],[31,2],[17,0],[17,4],[39,3],[39,1],[41,2],[41,1],[11,1],[11,3],[43,1],[43,1],[43,2],[12,0],[12,2],[48,1],[48,3],[49,1],[49,3],[49,5],[50,3],[53,1],[53,1],[53,3],[46,0],[46,1],[46,2],[54,0],[54,4],[58,3],[58,1],[51,1],[51,1],[51,1],[51,1],[51,1],[51,1],[51,1],[51,1],[51,1],[6,3],[6,3],[6,1],[6,1],[22,1],[22,3],[69,1],[69,3],[71,1],[71,2],[71,4],[71,2],[77,1],[77,1],[77,1],[77,1],[77,1],[77,1],[77,1],[74,1],[74,1],[74,1],[74,1],[74,1],[85,2],[85,5],[85,5],[85,5],[86,2],[86,3],[86,4],[86,5],[87,4],[87,5],[95,1],[95,3],[24,3],[24,1],[96,1],[96,1],[96,1],[97,3],[97,1],[98,0],[98,1],[88,2],[88,3],[89,4],[89,5],[73,1],[73,3],[101,1],[101,3],[101,3],[103,1],[103,3],[103,3],[103,3],[106,1],[106,1],[106,1],[106,1],[106,1],[106,3],[106,4],[106,4],[106,6],[113,2],[113,2],[114,0],[114,3],[111,4],[116,5],[116,4],[117,0],[117,2],[109,1],[109,1],[109,1],[109,1],[109,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return {nodeType: 'Main', value: $$[$0-1]}; 
break;
case 2: case 7: case 9: case 11: case 13: case 15: case 20: case 21: case 37: case 44: case 45: case 75: case 76: case 77: case 78: case 79: case 80: case 81: case 82: case 83: case 84: case 85: case 86: case 101: case 102: case 103: case 107: case 112: case 114: case 117: case 125: case 138: case 139: case 140: case 141: case 142: case 143:
 this.$ = $$[$0]; 
break;
case 3:
 this.$ = {nodeType: 'Select', distinct: $$[$0-8], top: $$[$0-7], columns: $$[$0-6], from: $$[$0-5], where:$$[$0-4], groupBy:$$[$0-3], having:$$[$0-2], orderBy:$$[$0-1], queryHints:$$[$0]}; 
break;
case 4:
 this.$ = false; 
break;
case 5:
 this.$ = true; 
break;
case 6: case 8: case 10: case 12: case 14: case 25: case 47: case 50: case 106: case 132: case 137:
 this.$ = null; 
break;
case 16: case 27: case 32: case 39: case 52: case 70: case 99: case 104:
 this.$ = $$[$0-2]; $$[$0-2].push($$[$0]); 
break;
case 17: case 28: case 30: case 31: case 38: case 53: case 69: case 100: case 105:
 this.$ = [$$[$0]]; 
break;
case 18:
 this.$ = {expression:$$[$0-2], orderByOrder: $$[$0-1], orderByNulls: $$[$0]}; 
break;
case 19: case 54:
 this.$ = ''; 
break;
case 22:
 this.$ = '';
break;
case 23:
 this.$ = 'NULLS FIRST'; 
break;
case 24:
 this.$ = 'NULLS LAST'; 
break;
case 26: case 46: case 51: case 95: case 133:
 this.$ = $$[$0-1]; 
break;
case 29:
 this.$ = $$[$0-1]; $$[$0-1].push($$[$0]); 
break;
case 33:
 this.$ = {nodeType: 'Column', value:'*'}; 
break;
case 34:
 this.$ = {nodeType: 'Column', value:$$[$0]}; 
break;
case 35:
 this.$ = {nodeType: 'Column', value:$$[$0-1], alias:$$[$0]}; 
break;
case 36:
 this.$ = []; 
break;
case 40:
 this.$ = {nodeType:'TableExpr', value: [$$[$0]]}; 
break;
case 41:
 this.$ = $$[$0-2]; $$[$0-2].value.push({nodeType:'TableExpr', value: $$[$0], modifier:$$[$0-1]}); 
break;
case 42:
 this.$ = $$[$0-4]; $$[$0-4].value.push({nodeType:'TableExpr', value: $$[$0-2], modifier:$$[$0-3], expression:$$[$0]}); 
break;
case 43:
 this.$ = {exprName: $$[$0-2], alias: $$[$0-1], tableHints: $$[$0]}; 
break;
case 48:
 this.$ = {value: $$[$0] }; 
break;
case 49:
 this.$ = {value: $$[$0], includeAs: 1}; 
break;
case 55:
 this.$ = 'LEFT'; 
break;
case 56:
 this.$ = 'LEFT OUTER'; 
break;
case 57:
 this.$ = 'RIGHT'; 
break;
case 58:
 this.$ = 'RIGHT OUTER'; 
break;
case 59:
 this.$ = 'FULL'; 
break;
case 60:
 this.$ = 'INNER'; 
break;
case 61:
 this.$ = 'CROSS'; 
break;
case 62:
 this.$ = 'NATURAL'; 
break;
case 63: case 64:
 this.$ = $$[$0-2]; $$[$0-2].push({nodeType:'SetOperator', value:$$[$0-1]}); $$[$0-2].push($$[$0]); 
break;
case 65: case 66:
 this.$ = [$$[$0]] 
break;
case 67:
 this.$ = {nodeType:'AndCondition', value: $$[$0]}; 
break;
case 68:
 this.$ = {nodeType:'OrCondition', left: $$[$0-2], right: $$[$0]}; 
break;
case 71:
 this.$ = {nodeType: 'Condition', value: $$[$0]}; 
break;
case 72:
 this.$ = {nodeType: 'BinaryCondition', left: $$[$0-1], right: $$[$0]}; 
break;
case 73:
 this.$ = {nodeType: 'ExistsCondition', value: $$[$0-1]}; 
break;
case 74:
 this.$ = {nodeType: 'NotCondition', value: $$[$0]}; 
break;
case 87:
 this.$ = {nodeType: 'RhsCompare', op: $$[$0-1], value: $$[$0] }; 
break;
case 88: case 89: case 90:
 this.$ = {nodeType: 'RhsCompareSub', op:$$[$0-4], kind: $$[$0-3], value: $$[$0-1] }; 
break;
case 91:
 this.$ = {nodeType: 'RhsIs', value: $$[$0]}; 
break;
case 92:
 this.$ = {nodeType: 'RhsIs', value: $$[$0], not:1}; 
break;
case 93:
 this.$ = {nodeType: 'RhsIs', value: $$[$0], distinctFrom:1}; 
break;
case 94:
 this.$ = {nodeType: 'RhsIs', value: $$[$0], not:1, distinctFrom:1}; 
break;
case 96:
 this.$ = $$[$0-1]; $$[$0-1].not = 1; 
break;
case 97:
 this.$ = { nodeType: 'RhsInSelect', value: $$[$0]}; 
break;
case 98:
 this.$ = { nodeType: 'RhsInExpressionList', value: $$[$0]}; $$[$0].unshift($$[$0-2]); 
break;
case 108:
 this.$ = {nodeType: 'RhsLike', value: $$[$0]}; 
break;
case 109:
 this.$ = {nodeType: 'RhsLike', value: $$[$0], not:1}; 
break;
case 110:
 this.$ = {nodeType: 'RhsBetween', left: $$[$0-2], right: $$[$0]}; 
break;
case 111:
 this.$ = {nodeType: 'RhsBetween', left: $$[$0-2], right: $$[$0], not:1}; 
break;
case 113:
 this.$ = {nodeType:'Operand', left:$$[$0-2], right:$$[$0], op:$$[$0-1]}; 
break;
case 115: case 116:
 this.$ = {nodeType:'Summand', left:$$[$0-2], right:$$[$0], op:$$[$0-1]}; 
break;
case 118: case 119: case 120:
 this.$ = {nodeType:'Factor', left:$$[$0-2], right:$$[$0], op:$$[$0-1]}; 
break;
case 121: case 122: case 123: case 124:
 this.$ = {nodeType: 'Term', value: $$[$0]}; 
break;
case 126:
 this.$ = {nodeType: 'Term', value: $$[$0-1]}; 
break;
case 127: case 128:
 this.$ = {nodeType: 'FunctionCall', name: $$[$0-3], args: $$[$0-1]}; 
break;
case 129:
 this.$ = {nodeType: 'Cast', expression:$$[$0-3], dataType:$$[$0-1]}; 
break;
case 130: case 131:
 this.$ = {name: $$[$0-1], len: $$[$0]}; 
break;
case 134:
 this.$ = {nodeType:'Case', clauses: $$[$0-2], else: $$[$0-1]}; 
break;
case 135:
 this.$ = $$[$0-4]; $$[$0-4].push({nodeType: 'CaseItem', when: $$[$0-2], then: $$[$0]}); 
break;
case 136:
 this.$ = [{nodeType: 'CaseItem', when: $$[$0-2], then: $$[$0]}]; 
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:$V0,20:$V1,22:5,38:$V2,42:$V3,55:$V4,69:7,71:8,73:9,75:$V5,76:$V6,101:12,103:13,106:14,109:15,110:$V7,111:19,112:$V8,115:$V9,122:$Va,123:$Vb,124:$Vc,125:$Vd},{1:[3]},{5:[1,28]},o([5,40],[2,2],{68:$Ve}),o($Vf,[2,65]),o($Vf,$Vg,{70:$Vh}),o($Vi,[2,4],{9:31,18:[1,32]}),o($Vj,[2,67],{72:$Vk}),o($Vl,[2,69]),o($Vl,[2,71],{74:34,85:36,86:37,87:38,88:39,89:40,77:41,76:[1,44],78:[1,47],79:[1,48],80:[1,49],81:[1,50],82:[1,51],83:[1,52],84:[1,53],93:[1,42],94:[1,43],99:[1,45],100:[1,46],102:$Vm}),{38:[1,54]},{20:$V1,38:$V2,42:$V3,55:$V4,71:55,73:9,75:$V5,76:$V6,101:12,103:13,106:14,109:15,110:$V7,111:19,112:$V8,115:$V9,122:$Va,123:$Vb,124:$Vc,125:$Vd},o($Vn,[2,112],{104:$Vo,105:$Vp}),o($Vq,[2,114],{44:$Vr,107:$Vs,108:$Vt}),o($Vu,[2,117]),o($Vu,[2,121]),o($Vu,[2,122],{38:[1,61]}),o($Vu,[2,123]),o($Vu,[2,124],{38:[1,62]}),o($Vu,[2,125]),{6:63,7:4,8:$V0,20:$V1,22:5,38:$V2,42:$V3,55:$V4,69:7,71:8,73:9,75:$V5,76:$V6,101:12,103:13,106:14,109:15,110:$V7,111:19,112:$V8,115:$V9,122:$Va,123:$Vb,124:$Vc,125:$Vd},{38:[1,64]},o($Vu,[2,139]),o($Vu,[2,140]),o($Vu,[2,141]),o($Vu,[2,142]),o($Vu,[2,143]),{116:65,119:[1,66]},{1:[2,1]},{7:67,8:$V0,20:$V1,22:68,38:$V2,42:$V3,55:$V4,69:7,71:8,73:9,75:$V5,76:$V6,101:12,103:13,106:14,109:15,110:$V7,111:19,112:$V8,115:$V9,122:$Va,123:$Vb,124:$Vc,125:$Vd},{20:$V1,38:$V2,42:$V3,55:$V4,69:69,71:8,73:9,75:$V5,76:$V6,101:12,103:13,106:14,109:15,110:$V7,111:19,112:$V8,115:$V9,122:$Va,123:$Vb,124:$Vc,125:$Vd},o($Vv,[2,6],{10:70,19:[1,71]}),o($Vi,[2,5]),{20:$V1,38:$V2,42:$V3,55:$V4,71:72,73:9,75:$V5,76:$V6,101:12,103:13,106:14,109:15,110:$V7,111:19,112:$V8,115:$V9,122:$Va,123:$Vb,124:$Vc,125:$Vd},o($Vl,[2,72]),{20:$V1,38:$V2,42:$V3,55:$V4,101:73,103:13,106:14,109:15,110:$V7,111:19,112:$V8,115:$V9,122:$Va,123:$Vb,124:$Vc,125:$Vd},o($Vl,[2,82]),o($Vl,[2,83]),o($Vl,[2,84]),o($Vl,[2,85]),o($Vl,[2,86]),{20:$V1,38:$V2,42:$V3,55:$V4,73:74,90:[1,75],91:[1,76],92:[1,77],101:12,103:13,106:14,109:15,110:$V7,111:19,112:$V8,115:$V9,122:$Va,123:$Vb,124:$Vc,125:$Vd},{18:[1,80],20:$V1,38:$V2,42:$V3,55:$V4,73:78,76:[1,79],101:12,103:13,106:14,109:15,110:$V7,111:19,112:$V8,115:$V9,122:$Va,123:$Vb,124:$Vc,125:$Vd},{38:[1,81]},{94:[1,82],99:[1,83],100:[1,84]},{20:$V1,38:$V2,42:$V3,55:$V4,73:85,101:12,103:13,106:14,109:15,110:$V7,111:19,112:$V8,115:$V9,122:$Va,123:$Vb,124:$Vc,125:$Vd},{20:$V1,38:$V2,42:$V3,55:$V4,73:86,101:12,103:13,106:14,109:15,110:$V7,111:19,112:$V8,115:$V9,122:$Va,123:$Vb,124:$Vc,125:$Vd},o($Vw,[2,75]),o($Vw,[2,76]),o($Vw,[2,77]),o($Vw,[2,78]),o($Vw,[2,79]),o($Vw,[2,80]),o($Vw,[2,81]),{4:87,6:3,7:4,8:$V0,20:$V1,22:5,38:$V2,42:$V3,55:$V4,69:7,71:8,73:9,75:$V5,76:$V6,101:12,103:13,106:14,109:15,110:$V7,111:19,112:$V8,115:$V9,122:$Va,123:$Vb,124:$Vc,125:$Vd},o($Vl,[2,74]),{20:$V1,38:$V2,42:$V3,55:$V4,103:88,106:14,109:15,110:$V7,111:19,112:$V8,115:$V9,122:$Va,123:$Vb,124:$Vc,125:$Vd},{20:$V1,38:$V2,42:$V3,55:$V4,103:89,106:14,109:15,110:$V7,111:19,112:$V8,115:$V9,122:$Va,123:$Vb,124:$Vc,125:$Vd},{20:$V1,38:$V2,42:$V3,55:$V4,106:90,109:15,110:$V7,111:19,112:$V8,115:$V9,122:$Va,123:$Vb,124:$Vc,125:$Vd},{20:$V1,38:$V2,42:$V3,55:$V4,106:91,109:15,110:$V7,111:19,112:$V8,115:$V9,122:$Va,123:$Vb,124:$Vc,125:$Vd},{20:$V1,38:$V2,42:$V3,55:$V4,106:92,109:15,110:$V7,111:19,112:$V8,115:$V9,122:$Va,123:$Vb,124:$Vc,125:$Vd},{20:$V1,22:96,38:$V2,40:$Vx,42:$V3,44:$Vy,45:$Vz,55:$V4,69:7,71:8,73:9,75:$V5,76:$V6,96:95,97:94,98:93,101:12,103:13,106:14,109:15,110:$V7,111:19,112:$V8,115:$V9,122:$Va,123:$Vb,124:$Vc,125:$Vd},{20:$V1,22:96,38:$V2,40:$Vx,42:$V3,44:$Vy,45:$Vz,55:$V4,69:7,71:8,73:9,75:$V5,76:$V6,96:95,97:94,98:99,101:12,103:13,106:14,109:15,110:$V7,111:19,112:$V8,115:$V9,122:$Va,123:$Vb,124:$Vc,125:$Vd},{40:[1,100],68:$Ve},{20:$V1,22:101,38:$V2,42:$V3,55:$V4,69:7,71:8,73:9,75:$V5,76:$V6,101:12,103:13,106:14,109:15,110:$V7,111:19,112:$V8,115:$V9,122:$Va,123:$Vb,124:$Vc,125:$Vd},{117:102,118:[2,137],119:[1,103],121:[1,104]},{20:$V1,22:105,38:$V2,42:$V3,55:$V4,69:7,71:8,73:9,75:$V5,76:$V6,101:12,103:13,106:14,109:15,110:$V7,111:19,112:$V8,115:$V9,122:$Va,123:$Vb,124:$Vc,125:$Vd},o($Vf,[2,63]),o($Vf,[2,64],{70:$Vh}),o($Vj,[2,68],{72:$Vk}),{11:106,20:$V1,22:110,38:$V2,42:$V3,43:107,44:$VA,45:$VB,55:$V4,69:7,71:8,73:9,75:$V5,76:$V6,101:12,103:13,106:14,109:15,110:$V7,111:19,112:$V8,115:$V9,122:$Va,123:$Vb,124:$Vc,125:$Vd},{20:[1,111]},o($Vl,[2,70]),o($Vn,[2,113],{104:$Vo,105:$Vp}),o($Vl,[2,87],{102:$Vm}),{38:[1,112]},{38:[1,113]},{38:[1,114]},o($Vl,[2,91],{102:$Vm}),{18:[1,116],20:$V1,38:$V2,42:$V3,55:$V4,73:115,101:12,103:13,106:14,109:15,110:$V7,111:19,112:$V8,115:$V9,122:$Va,123:$Vb,124:$Vc,125:$Vd},{47:[1,117]},{4:119,6:3,7:4,8:$V0,20:$V1,22:120,38:$V2,42:$V3,55:$V4,69:7,71:8,73:9,75:$V5,76:$V6,95:118,101:12,103:13,106:14,109:15,110:$V7,111:19,112:$V8,115:$V9,122:$Va,123:$Vb,124:$Vc,125:$Vd},{38:[1,121]},{20:$V1,38:$V2,42:$V3,55:$V4,73:122,101:12,103:13,106:14,109:15,110:$V7,111:19,112:$V8,115:$V9,122:$Va,123:$Vb,124:$Vc,125:$Vd},{20:$V1,38:$V2,42:$V3,55:$V4,73:123,101:12,103:13,106:14,109:15,110:$V7,111:19,112:$V8,115:$V9,122:$Va,123:$Vb,124:$Vc,125:$Vd},o($Vl,[2,108],{102:$Vm}),{72:[1,124],102:$Vm},{40:[1,125]},o($Vq,[2,115],{44:$Vr,107:$Vs,108:$Vt}),o($Vq,[2,116],{44:$Vr,107:$Vs,108:$Vt}),o($Vu,[2,118]),o($Vu,[2,119]),o($Vu,[2,120]),{40:[1,126]},{28:[1,127],40:[2,107]},o($VC,[2,105]),o($VC,[2,101],{70:$Vh}),o($VC,[2,102]),o($VC,[2,103]),{40:[1,128]},o($Vu,[2,126]),{56:[1,129],70:$Vh},{118:[1,130]},{20:$V1,22:131,38:$V2,42:$V3,55:$V4,69:7,71:8,73:9,75:$V5,76:$V6,101:12,103:13,106:14,109:15,110:$V7,111:19,112:$V8,115:$V9,122:$Va,123:$Vb,124:$Vc,125:$Vd},{20:$V1,22:132,38:$V2,42:$V3,55:$V4,69:7,71:8,73:9,75:$V5,76:$V6,101:12,103:13,106:14,109:15,110:$V7,111:19,112:$V8,115:$V9,122:$Va,123:$Vb,124:$Vc,125:$Vd},{70:$Vh,120:[1,133]},o($VD,[2,36],{12:134,28:[1,135],47:[1,136]}),o($VE,[2,31]),o($VE,[2,33]),o($VE,[2,34]),o($VE,$VF,{46:137,42:$VG,56:$VH,70:$Vh}),o($Vv,[2,7]),{4:140,6:3,7:4,8:$V0,20:$V1,22:5,38:$V2,42:$V3,55:$V4,69:7,71:8,73:9,75:$V5,76:$V6,101:12,103:13,106:14,109:15,110:$V7,111:19,112:$V8,115:$V9,122:$Va,123:$Vb,124:$Vc,125:$Vd},{4:141,6:3,7:4,8:$V0,20:$V1,22:5,38:$V2,42:$V3,55:$V4,69:7,71:8,73:9,75:$V5,76:$V6,101:12,103:13,106:14,109:15,110:$V7,111:19,112:$V8,115:$V9,122:$Va,123:$Vb,124:$Vc,125:$Vd},{4:142,6:3,7:4,8:$V0,20:$V1,22:5,38:$V2,42:$V3,55:$V4,69:7,71:8,73:9,75:$V5,76:$V6,101:12,103:13,106:14,109:15,110:$V7,111:19,112:$V8,115:$V9,122:$Va,123:$Vb,124:$Vc,125:$Vd},o($Vl,[2,92],{102:$Vm}),{47:[1,143]},{20:$V1,38:$V2,42:$V3,55:$V4,73:144,101:12,103:13,106:14,109:15,110:$V7,111:19,112:$V8,115:$V9,122:$Va,123:$Vb,124:$Vc,125:$Vd},{40:[1,145]},{40:[2,97]},o([40,68],$Vg,{28:[1,146],70:$Vh}),{4:119,6:3,7:4,8:$V0,20:$V1,22:120,38:$V2,42:$V3,55:$V4,69:7,71:8,73:9,75:$V5,76:$V6,95:147,101:12,103:13,106:14,109:15,110:$V7,111:19,112:$V8,115:$V9,122:$Va,123:$Vb,124:$Vc,125:$Vd},o($Vl,[2,109],{102:$Vm}),{72:[1,148],102:$Vm},{20:$V1,38:$V2,42:$V3,55:$V4,73:149,101:12,103:13,106:14,109:15,110:$V7,111:19,112:$V8,115:$V9,122:$Va,123:$Vb,124:$Vc,125:$Vd},o($Vl,[2,73]),o($Vu,[2,127]),{20:$V1,22:96,38:$V2,42:$V3,44:$Vy,45:$Vz,55:$V4,69:7,71:8,73:9,75:$V5,76:$V6,96:150,101:12,103:13,106:14,109:15,110:$V7,111:19,112:$V8,115:$V9,122:$Va,123:$Vb,124:$Vc,125:$Vd},o($Vu,[2,128]),{42:[1,152],110:[1,153],113:151},o($Vu,[2,134]),{70:$Vh,120:[1,154]},{70:$Vh,118:[2,138]},{20:$V1,22:155,38:$V2,42:$V3,55:$V4,69:7,71:8,73:9,75:$V5,76:$V6,101:12,103:13,106:14,109:15,110:$V7,111:19,112:$V8,115:$V9,122:$Va,123:$Vb,124:$Vc,125:$Vd},o($VI,[2,8],{13:156,21:[1,157]}),{20:$V1,22:110,38:$V2,42:$V3,43:158,44:$VA,45:$VB,55:$V4,69:7,71:8,73:9,75:$V5,76:$V6,101:12,103:13,106:14,109:15,110:$V7,111:19,112:$V8,115:$V9,122:$Va,123:$Vb,124:$Vc,125:$Vd},{38:$VJ,42:$VK,48:159,49:160,50:161,53:162,55:$VL},o($VE,[2,35]),o($VM,[2,48]),{42:[1,166]},{40:[1,167]},{40:[1,168]},{40:[1,169]},{20:$V1,38:$V2,42:$V3,55:$V4,73:170,101:12,103:13,106:14,109:15,110:$V7,111:19,112:$V8,115:$V9,122:$Va,123:$Vb,124:$Vc,125:$Vd},o($Vl,[2,93],{102:$Vm}),o($Vl,[2,95]),{20:$V1,22:172,24:171,38:$V2,42:$V3,55:$V4,69:7,71:8,73:9,75:$V5,76:$V6,101:12,103:13,106:14,109:15,110:$V7,111:19,112:$V8,115:$V9,122:$Va,123:$Vb,124:$Vc,125:$Vd},{40:[1,173]},{20:$V1,38:$V2,42:$V3,55:$V4,73:174,101:12,103:13,106:14,109:15,110:$V7,111:19,112:$V8,115:$V9,122:$Va,123:$Vb,124:$Vc,125:$Vd},o($Vl,[2,110],{102:$Vm}),o($VC,[2,104]),{40:[1,175]},{38:$VN,40:$VO,114:176},{38:$VN,40:$VO,114:178},{20:$V1,22:179,38:$V2,42:$V3,55:$V4,69:7,71:8,73:9,75:$V5,76:$V6,101:12,103:13,106:14,109:15,110:$V7,111:19,112:$V8,115:$V9,122:$Va,123:$Vb,124:$Vc,125:$Vd},o($VP,[2,136],{70:$Vh}),o($VQ,[2,10],{14:180,23:[1,181]}),{20:$V1,22:182,38:$V2,42:$V3,55:$V4,69:7,71:8,73:9,75:$V5,76:$V6,101:12,103:13,106:14,109:15,110:$V7,111:19,112:$V8,115:$V9,122:$Va,123:$Vb,124:$Vc,125:$Vd},o($VE,[2,32]),o($VD,[2,37],{28:[1,183]}),o($VR,[2,38],{51:184,59:$VS,60:$VT,61:$VU,62:$VV,63:$VW,64:$VX,65:$VY,66:$VZ,67:$V_}),o($V$,[2,40]),o([5,21,23,25,26,28,37,40,52,57,59,60,61,62,63,64,65,66,67,68],$VF,{46:194,42:$VG,56:$VH}),o($V01,[2,44]),o($V01,[2,45]),{4:195,6:3,7:4,8:$V0,20:$V1,22:5,38:$V2,42:$V3,55:$V4,69:7,71:8,73:9,75:$V5,76:$V6,101:12,103:13,106:14,109:15,110:$V7,111:19,112:$V8,115:$V9,122:$Va,123:$Vb,124:$Vc,125:$Vd},o($VM,[2,49]),o($Vl,[2,88]),o($Vl,[2,89]),o($Vl,[2,90]),o($Vl,[2,94],{102:$Vm}),{28:$V11,40:[2,98]},o($V21,[2,100],{70:$Vh}),o($Vl,[2,96]),o($Vl,[2,111],{102:$Vm}),o($Vu,[2,129]),{40:[2,130]},{20:[1,197]},{40:[2,131]},o($VP,[2,135],{70:$Vh}),o($V31,[2,12],{15:198,25:[1,199]}),{20:$V1,22:172,24:200,38:$V2,42:$V3,55:$V4,69:7,71:8,73:9,75:$V5,76:$V6,101:12,103:13,106:14,109:15,110:$V7,111:19,112:$V8,115:$V9,122:$Va,123:$Vb,124:$Vc,125:$Vd},o($VI,[2,9],{70:$Vh}),{38:$VJ,42:$VK,49:201,50:161,53:162,55:$VL},{38:$VJ,42:$VK,50:202,53:162,55:$VL},o($V41,[2,54]),o($V41,[2,55]),o($V41,[2,56]),o($V41,[2,57]),o($V41,[2,58]),o($V41,[2,59]),o($V41,[2,60]),o($V41,[2,61]),o($V41,[2,62]),o($V51,[2,50],{54:203,57:[1,204]}),{40:[1,205]},{20:$V1,22:206,38:$V2,42:$V3,55:$V4,69:7,71:8,73:9,75:$V5,76:$V6,101:12,103:13,106:14,109:15,110:$V7,111:19,112:$V8,115:$V9,122:$Va,123:$Vb,124:$Vc,125:$Vd},{40:[1,207]},o($V61,[2,14],{16:208,26:[1,209]}),{20:$V1,22:210,38:$V2,42:$V3,55:$V4,69:7,71:8,73:9,75:$V5,76:$V6,101:12,103:13,106:14,109:15,110:$V7,111:19,112:$V8,115:$V9,122:$Va,123:$Vb,124:$Vc,125:$Vd},o($VQ,[2,11],{28:$V11}),o($VR,[2,39],{51:184,59:$VS,60:$VT,61:$VU,62:$VV,63:$VW,64:$VX,65:$VY,66:$VZ,67:$V_}),o($V$,[2,41],{52:[1,211]}),o($V51,[2,43]),{38:[1,212]},o($V01,[2,46]),o($V21,[2,99],{70:$Vh}),{40:[2,133]},o($Vf,[2,25],{17:213,37:[1,214]}),{20:$V1,22:217,27:215,29:216,38:$V2,42:$V3,55:$V4,69:7,71:8,73:9,75:$V5,76:$V6,101:12,103:13,106:14,109:15,110:$V7,111:19,112:$V8,115:$V9,122:$Va,123:$Vb,124:$Vc,125:$Vd},o($V31,[2,13],{70:$Vh}),{20:$V1,22:218,38:$V2,42:$V3,55:$V4,69:7,71:8,73:9,75:$V5,76:$V6,101:12,103:13,106:14,109:15,110:$V7,111:19,112:$V8,115:$V9,122:$Va,123:$Vb,124:$Vc,125:$Vd},{42:[1,220],58:219},o($Vf,[2,3]),{38:[1,221]},o($V61,[2,15],{28:[1,222]}),o($V71,[2,17]),o($V81,[2,19],{30:223,32:[1,224],33:[1,225],70:$Vh}),o($V$,[2,42],{70:$Vh}),{28:[1,227],40:[1,226]},o($VC,[2,53]),{39:228,41:229,42:$V91},{20:$V1,22:217,29:231,38:$V2,42:$V3,55:$V4,69:7,71:8,73:9,75:$V5,76:$V6,101:12,103:13,106:14,109:15,110:$V7,111:19,112:$V8,115:$V9,122:$Va,123:$Vb,124:$Vc,125:$Vd},o($V71,[2,22],{31:232,34:[1,233]}),o($V81,[2,20]),o($V81,[2,21]),o($V51,[2,51]),{42:[1,234]},{28:[1,236],40:[1,235]},o($VC,[2,28],{42:$Va1}),o($Vb1,[2,30]),o($V71,[2,16]),o($V71,[2,18]),{35:[1,238],36:[1,239]},o($VC,[2,52]),o($Vf,[2,26]),{41:240,42:$V91},o($Vb1,[2,29]),o($V71,[2,23]),o($V71,[2,24]),o($VC,[2,27],{42:$Va1})],
defaultActions: {28:[2,1],119:[2,97],176:[2,130],178:[2,131],207:[2,133]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        function lex() {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip comments */
break;
case 1:return 55
break;
case 2:return 45
break;
case 3:/* skip whitespace */
break;
case 4:return 8
break;
case 5:return 19
break;
case 6:return 47
break;
case 7:return 21
break;
case 8:return 18
break;
case 9:return 100
break;
case 10:return 23
break;
case 11:return 25
break;
case 12:return 26
break;
case 13:return 68
break;
case 14:return 28
break;
case 15:return 104
break;
case 16:return 105
break;
case 17:return 107
break;
case 18:return 44
break;
case 19:return 108
break;
case 20:return 78
break;
case 21:return 79
break;
case 22:return 80
break;
case 23:return 82
break;
case 24:return 81
break;
case 25:return 84
break;
case 26:return 83
break;
case 27:return 38
break;
case 28:return 40
break;
case 29:return 102
break;
case 30:return 56
break;
case 31:return 90
break;
case 32:return 91
break;
case 33:return 92
break;
case 34:return 75
break;
case 35:return 93
break;
case 36:return 94
break;
case 37:return 52
break;
case 38:return 72
break;
case 39:return 70
break;
case 40:return 76
break;
case 41:return 65
break;
case 42:return 61
break;
case 43:return 63
break;
case 44:return 59
break;
case 45:return 60
break;
case 46:return 62
break;
case 47:return 64
break;
case 48:return 67
break;
case 49:return 66
break;
case 50:return 115
break;
case 51:return 119
break;
case 52:return 120
break;
case 53:return 121
break;
case 54:return 118
break;
case 55:return 99
break;
case 56:return 32
break;
case 57:return 33
break;
case 58:return 34
break;
case 59:return 35
break;
case 60:return 36
break;
case 61:return 37
break;
case 62:return 57
break;
case 63:return 112
break;
case 64:return 122
break;
case 65:return 124
break;
case 66:return 123
break;
case 67:return 20
break;
case 68:return 42
break;
case 69:return 110
break;
case 70:return 125
break;
case 71:return 5
break;
case 72:return 'INVALID'
break;
}
},
rules: [/^(?:[/][*](.|\n)*?[*][/])/i,/^(?:[a-zA-Z_][a-zA-Z0-9_]*\.[a-zA-Z_][a-zA-Z0-9_]*)/i,/^(?:[a-zA-Z_][a-zA-Z0-9_]*\.\*)/i,/^(?:\s+)/i,/^(?:SELECT\b)/i,/^(?:TOP\b)/i,/^(?:FROM\b)/i,/^(?:WHERE\b)/i,/^(?:DISTINCT\b)/i,/^(?:BETWEEN\b)/i,/^(?:GROUP\s+BY\b)/i,/^(?:HAVING\b)/i,/^(?:ORDER\s+BY\b)/i,/^(?:(UNION\s+ALL|UNION|INTERSECT|EXCEPT)\b)/i,/^(?:,)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\/)/i,/^(?:\*)/i,/^(?:%)/i,/^(?:=)/i,/^(?:!=)/i,/^(?:<>)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\|\|)/i,/^(?:AS\b)/i,/^(?:ALL\b)/i,/^(?:ANY\b)/i,/^(?:SOME\b)/i,/^(?:EXISTS\b)/i,/^(?:IS\b)/i,/^(?:IN\b)/i,/^(?:ON\b)/i,/^(?:AND\b)/i,/^(?:OR\b)/i,/^(?:NOT\b)/i,/^(?:INNER\s+JOIN\b)/i,/^(?:LEFT\s+OUTER\s+JOIN\b)/i,/^(?:RIGHT\s+OUTER\s+JOIN\b)/i,/^(?:JOIN\b)/i,/^(?:LEFT\s+JOIN\b)/i,/^(?:RIGHT\s+JOIN\b)/i,/^(?:FULL\s+JOIN\b)/i,/^(?:NATURAL\s+JOIN\b)/i,/^(?:CROSS\s+JOIN\b)/i,/^(?:CASE\b)/i,/^(?:WHEN\b)/i,/^(?:THEN\b)/i,/^(?:ELSE\b)/i,/^(?:END\b)/i,/^(?:LIKE\b)/i,/^(?:ASC\b)/i,/^(?:DESC\b)/i,/^(?:NULLS\b)/i,/^(?:FIRST\b)/i,/^(?:LAST\b)/i,/^(?:OPTION\b)/i,/^(?:WITH\b)/i,/^(?:CAST\b)/i,/^(?:N?['](\\.|[^'])*['])/i,/^(?:NULL\b)/i,/^(?:(true|false)\b)/i,/^(?:[0-9]+(\.[0-9]+)?)/i,/^(?:[a-zA-Z_][a-zA-Z0-9_]*)/i,/^(?:["][a-zA-Z_][a-zA-Z0-9_]*["])/i,/^(?:[?])/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();